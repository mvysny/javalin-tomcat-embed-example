package org.test

import javax.servlet.annotation.WebServlet

import io.javalin.Javalin
import io.javalin.core.JavalinServlet
import io.javalin.core.util.Util
import io.javalin.staticfiles.JettyResourceHandler
import org.eclipse.jetty.server.Request
import javax.servlet.http.HttpServlet
import javax.servlet.http.HttpServletRequest
import javax.servlet.http.HttpServletResponse

@WebServlet(urlPatterns = ["/rest/*"], name = "MyFooServlet", asyncSupported = false)
class MyFooServlet : HttpServlet() {
    val javalin = Javalin.create()
        .get("/rest") { ctx -> ctx.result("Hello!") }
        .createServlet()

    init {
        // to prevent Javalin from from displaying a helpful message
        Util.noServerHasBeenStarted = false
    }

    override fun service(req: HttpServletRequest, resp: HttpServletResponse) {
        req.setAttribute("jetty-target", "foo")
        req.setAttribute("jetty-request", Request(null, null))
        javalin.service(req, resp)
    }
}

fun <T> Javalin.peek(field: String): T {
    val f = Javalin::class.java.declaredFields.first { it.name == field } .apply {
        isAccessible = true
    }
    return f.get(this) as T
}

fun Javalin.createServlet(): JavalinServlet {
    return JavalinServlet(
        this,
        peek("pathMatcher"),
        peek("exceptionMapper"),
        peek("errorMapper"),
        peek("debugLogging"),
        peek("requestLogger"),
        peek("dynamicGzipEnabled"),
        peek("autogeneratedEtagsEnabled"),
        peek("defaultContentType"),
        peek("maxRequestCacheBodySize"),
        peek("prefer405over404"),
        peek("singlePageHandler"),
        JettyResourceHandler(peek("staticFileConfig"), peek("jettyServer"), peek("ignoreTrailingSlashes"))
    )
}
